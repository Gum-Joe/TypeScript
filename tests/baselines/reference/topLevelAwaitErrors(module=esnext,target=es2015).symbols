=== tests/cases/conformance/externalModules/topLevelAwaitErrors.ts ===
export const x = 1;
>x : Symbol(x, Decl(topLevelAwaitErrors.ts, 0, 12))

// reparse call as invalid await should error
await (x,);
>x : Symbol(x, Decl(topLevelAwaitErrors.ts, 0, 12))

await <number, string>(x);
>x : Symbol(x, Decl(topLevelAwaitErrors.ts, 0, 12))

// reparse tagged template as invalid await should error
await <number, string> ``;

// reparse variable names and patterns as await should fail
var await = 1;
>await : Symbol(await, Decl(topLevelAwaitErrors.ts, 10, 3), Decl(topLevelAwaitErrors.ts, 11, 5), Decl(topLevelAwaitErrors.ts, 12, 5))

var {await} = {await:1};
>await : Symbol(await, Decl(topLevelAwaitErrors.ts, 10, 3), Decl(topLevelAwaitErrors.ts, 11, 5), Decl(topLevelAwaitErrors.ts, 12, 5))
>await : Symbol(await, Decl(topLevelAwaitErrors.ts, 11, 15))

var [await] = [1];
>await : Symbol(await, Decl(topLevelAwaitErrors.ts, 10, 3), Decl(topLevelAwaitErrors.ts, 11, 5), Decl(topLevelAwaitErrors.ts, 12, 5))

// reparse class extends clause should fail
class C extends await<string> {
>C : Symbol(C, Decl(topLevelAwaitErrors.ts, 12, 18))
}

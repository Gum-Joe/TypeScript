tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(4,8): error TS2695: Left side of comma operator is unused and has no side effects.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(4,10): error TS1109: Expression expected.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(5,14): error TS1005: '>' expected.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(5,16): error TS2693: 'string' only refers to a type, but is being used as a value here.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(8,14): error TS1005: '>' expected.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(8,16): error TS2693: 'string' only refers to a type, but is being used as a value here.
tests/cases/conformance/externalModules/topLevelAwaitErrors.ts(16,17): error TS1109: Expression expected.


==== tests/cases/conformance/externalModules/topLevelAwaitErrors.ts (7 errors) ====
    export const x = 1;
    
    // reparse call as invalid await should error
    await (x,);
           ~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
             ~
!!! error TS1109: Expression expected.
    await <number, string>(x);
                 ~
!!! error TS1005: '>' expected.
                   ~~~~~~
!!! error TS2693: 'string' only refers to a type, but is being used as a value here.
    
    // reparse tagged template as invalid await should error
    await <number, string> ``;
                 ~
!!! error TS1005: '>' expected.
                   ~~~~~~
!!! error TS2693: 'string' only refers to a type, but is being used as a value here.
    
    // reparse variable names and patterns as await should fail
    var await = 1;
    var {await} = {await:1};
    var [await] = [1];
    
    // reparse class extends clause should fail
    class C extends await<string> {
                    ~~~~~
!!! error TS1109: Expression expected.
    }